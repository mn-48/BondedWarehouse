# Generated by Django 5.2.6 on 2025-09-15 11:33

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0002_hscode_product_country_of_origin_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='UOM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=64)),
                ('description', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        # Add transitional FK field
        migrations.AddField(
            model_name='product',
            name='uom_fk',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.uom'),
        ),
        # Data migration: seed basic UOMs and map existing text values to FK
        migrations.RunPython(
            code=lambda apps, schema_editor: migrate_uom(apps, schema_editor),
            reverse_code=migrations.RunPython.noop,
        ),
        # Remove old char field and rename FK
        migrations.RemoveField(
            model_name='product',
            name='uom',
        ),
        migrations.RenameField(
            model_name='product',
            old_name='uom_fk',
            new_name='uom',
        ),
    ]


def migrate_uom(apps, schema_editor):
    Product = apps.get_model('inventory', 'Product')
    UOM = apps.get_model('inventory', 'UOM')
    # Ensure a default PCS exists
    pcs, _ = UOM.objects.get_or_create(code='PCS', defaults={'name': 'Pieces'})
    # Also create some common ones if present in data
    common = {
        'KG': 'Kilogram',
        'G': 'Gram',
        'L': 'Litre',
        'M': 'Meter',
        'BOX': 'Box',
    }
    for code, name in common.items():
        UOM.objects.get_or_create(code=code, defaults={'name': name})

    for p in Product.objects.all():
        value = getattr(p, 'uom', None)
        if not value:
            continue
        # Value is old char (e.g., 'PCS')
        code = str(value).strip().upper()
        try:
            u = UOM.objects.get(code=code)
        except UOM.DoesNotExist:
            u = UOM.objects.create(code=code, name=code)
        setattr(p, 'uom_fk', u)
        p.save(update_fields=['uom_fk'])
